// Add useEffect for calls to external systems!
import { useState, useEffect } from 'react'
import axios from 'axios'
// Give file location in relation to the importing file, and you can omit file extension
import Note from './components/Note'

/* Move Note into its own component file 
const Note = ({ note }) => {
  return (
    <li>{note.content}</li>
  )
}
*/

// Update App to useState
// Then update to remove the passing of props from main.jsx
const App = () => {
  const [notes, setNotes] = useState([])
  const [newNote, setNewNote] = useState('')
  // Add state to toggle only important notes
  const [showAll, setShowAll] = useState(true)

  // This retrieves notes from the localhost server
  // This is the most compact way to represent things
  useEffect(() => {
    console.log('effect')
    axios
      .get('http://localhost:3001/notes')
      .then(response => {
        console.log('promise fulfilled')
        setNotes(response.data)
      })
  }, [])
  // console.log('render', notes.length, 'notes')
  

  // This way, we see more clearly that useEffect takes 2 parameters: what will run after every completed render (a function), and how often to run the effect.
  // If we set the second parameter to an empty array ([]), the effect only runs on the first component render
  /*
  const hook = () => {
    console.log('effect')
    axios
      .get('http://localhost:3001/notes')
      .then(response => {
        console.log('promise fulfilled')
        setNotes(response.data)
      })
  }
  
  useEffect(hook, [])
  */

  // We can also write it this way - the event handler function is assigned to eventHandler
  // Promise from axios is assigned to promise 
  // eventHandler is assigned as a parameter to the then method in the promise
  /*
  useEffect(() => {
    console.log('effect')
  
    const eventHandler = response => {
      console.log('promise fulfilled')
      setNotes(response.data)
    }
  
    const promise = axios.get('http://localhost:3001/notes')
    promise.then(eventHandler)
  }, [])
  */

  // Handle the "save" button in the UI.
  // Create a new noteObject with the content of newNote
  // The important value has a 50% chance to be true
  // id is just length + 1 since 
  const addNote = (event) => {
    event.preventDefault()
    const noteObject = {
      content: newNote,
      important: Math.random() < 0.5,
      id: String(notes.length + 1),
    }
    // concat creates a new array with noteObject added to the end
    setNotes(notes.concat(noteObject))
    setNewNote('')
  }

  const handleNoteChange = (event) => {
    console.log(event.target.value)
    setNewNote(event.target.value)
  }

  // If showAll is true, display notes. Otherwise, use notes.filter(note => note.important)
  const notesToShow = showAll
    ? notes
    : notes.filter(note => note.important)

  return (
    <div>
      <h1>Notes</h1>
      <div>
        <button onClick={() => setShowAll(!showAll)}>
          show {showAll ? 'important' : 'all'}
        </button>
      </div>
      <ul>
        {notesToShow.map(note =>
          <Note key={note.id} note={note} />
        )}
      </ul>
      {/* <ul>
        {notes.map(note => 
          <Note key={note.id} note={note} />
        )}
      </ul> */}
      <form onSubmit={addNote}>
        <input 
          value={newNote}
          onChange={handleNoteChange} 
        />
        <button type="submit">save</button>
      </form>   
    </div>
  )
}

/* When we create a new component for Notes, the key has to be defined on the component itself 
const App = ({ notes }) => {
  return (
    <div>
      <h1>Notes</h1>
      <ul>
        {notes.map(note => 
          <Note key={note.id} note={note} />
        )}
      </ul>
    </div>
  )
}
*/

/*
const App = ({ notes }) => {

  return (
    <div>
      <h1>Notes</h1>
      <ul>
        { This works, but isn't practical if we expand the array of notes }
         <li>{notes[0].content}</li>
        <li>{notes[1].content}</li>
        <li>{notes[2].content}</li>
        
        { notes.map(note =>
            React needs "key" attributes for the objects (elements) generated by map(). 
            React uses key attributes  to determine how to update the view generated by a component 
            when the component is re-rendered. 
            
            Also, don't forget the curly braces - you'll get errors if you do not include them.
          <li key={note.id}>
            {note.content}
          </li>
        ) }
      </ul>
    </div>
  )
}
*/


export default App